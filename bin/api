#!/usr/bin/env node

'use strict';

const debug = require('debug')('api:server');

let startServer = function() {
  const app = require('../app.js');
  const http = require('http');

  // Get port from environment and store in Express
  const PORT = normalizePort(process.env.PORT || '3000');
  app.set('port', PORT);

  // Initialize HTTP server
  let server = http.createServer(app);

  // Listen on provided port, on all network interfaces
  server.listen(PORT);
  server.on('error', onError);
  server.on('listening', function() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.PORT;
    debug('Listening on ' + bind);
  });
};

// Normalize a port into a number, string, or false
let normalizePort = function(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
};

// Event listener for HTTP server "error" event
let onError = function(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

startServer();
